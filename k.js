const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const axios = require('axios');
const fs = require('fs');
const pdf = require('pdf-parse');
const { Client: PgClient } = require('pg'); 


console.log('üöÄ Iniciando el bot de WhatsApp...');

// üîπ Verifica si la sesi√≥n est√° bloqueada y la elimina antes de iniciar
const sessionPath = './.wwebjs_auth/session';
if (fs.existsSync(sessionPath)) {
    console.log('üóëÔ∏è Eliminando sesi√≥n anterior para evitar bloqueos...');
    fs.rmSync(sessionPath, { recursive: true, force: true });
}

console.log('üîÑ Inicializando el cliente de WhatsApp...');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        executablePath: process.env.CHROME_PATH  || 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        headless: false,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-extensions',
            '--disable-dev-shm-usage',
            '--disable-gpu'
        ]
    }
});

// Variable global para rastrear si estamos esperando una consulta
let waitingForQuery = {};

// Comandos de activaci√≥n para iniciar el bot
const startCommands = ['!start', 'hola', 'consulta', 'inicio', 'comenzar', 'ayuda', 'start', 'hi', 'hello'];

client.on('qr', qr => {
    console.log('üì∑ Escanea el c√≥digo QR con tu WhatsApp:');
    console.log(qr);
});

client.on('ready', () => {
    console.log('‚úÖ Cliente de WhatsApp est√° listo!');
});

client.on('message', async message => {
    try {
        console.log(`üì© Mensaje recibido de ${message.from}: ${message.body}`);

        // üîπ Responder solo a un n√∫mero espec√≠fico
        const numeroAutorizado = process.env.AUTHORIZED_NUMBER || '51919739431@c.us'; // Formato de WhatsApp sin "+" y con "c.us"
        if (message.from !== numeroAutorizado) {
            console.log('‚õî Mensaje ignorado, no es del n√∫mero autorizado.');
            return;
        }

        if (message.isGroupMsg) return;

        if (message.hasQuotedMsg) {
            try {
                console.log('üîç Detectado mensaje citado...');
                const quotedMsg = await Promise.race([
                    message.getQuotedMessage(),
                    new Promise((_, reject) =>
                        setTimeout(() => reject(new Error('‚è≥ Timeout obteniendo mensaje citado')), 5000)
                    )
                ]);

                console.log('üìå Mensaje citado:', quotedMsg.body || "[Mensaje multimedia]");
                message.reply(`üîπ Respondiste a: ${quotedMsg.body}`);
            } catch (error) {
                console.warn("‚ö†Ô∏è No se pudo obtener el mensaje citado:", error.message);
                message.reply("‚ö†Ô∏è Hubo un problema obteniendo el mensaje citado.");
            }
        }

        // Verificar si el mensaje es un comando de activaci√≥n (case insensitive)
        const userMessage = message.body.trim().toLowerCase();
        if (startCommands.includes(userMessage)) {
            // Resetear el estado de espera cuando se inicia el bot
            waitingForQuery[message.from] = false;
            console.log(`üöÄ Comando de activaci√≥n detectado: ${userMessage}`);
            await sendWelcomeMenu(message);
        } else {
            await handleMenuOptions(message);
        }
    } catch (error) {
        console.error("‚ùå Error en la gesti√≥n del mensaje:", error);
    }
});


async function getChatData() {
    try {
        console.log('üåê Obteniendo datos del chat...');
        const response = await axios.get('http://localhost:5001/api/chat');
        return response.data;
    } catch (error) {
        console.error('‚ùå Error al obtener datos del chat:', error.message);
        return null;
    }
}

async function sendWelcomeMenu(message) {
    const chatData = await getChatData();
    if (!chatData) {
        console.log('‚ö†Ô∏è No se pudo obtener el men√∫.');
        return message.reply("‚ö†Ô∏è No se pudo obtener el men√∫.");
    }

    const menuText = `${chatData.bienvenida}\n\n${chatData.menu.filter(op => op !== '5. Salir').join('\n')}\n\nüí¨ *Responde con el n√∫mero de la opci√≥n deseada.*`;
    console.log('üì® Enviando men√∫ de bienvenida...');
    message.reply(menuText);
}

async function handleMenuOptions(message) {
    const chatData = await getChatData();
    if (!chatData) {
        console.log('‚ö†Ô∏è No se pudo obtener las opciones del men√∫.');
        return message.reply("‚ö†Ô∏è No se pudo obtener las opciones del men√∫.");
    }

    const userOption = message.body.trim();
    const userOptionLower = userOption.toLowerCase(); // Convertir a min√∫sculas para comparaci√≥n
    
    // Si estamos esperando una consulta para este n√∫mero, no procesamos como opci√≥n de men√∫
    if (waitingForQuery[message.from]) {
        console.log(`üí¨ Recibida consulta de ${message.from}: ${userOption}`);
        // No hacemos nada, la consulta ser√° manejada por el listener en handleCatalogQuery
        return;
    }

    // Ignorar silenciosamente 'menu' y 'salir'
    if (userOptionLower === 'menu' || userOptionLower === 'salir') {
        console.log(`üîá Ignorando silenciosamente la palabra clave: ${userOptionLower}`);
        return; // No hacer nada, simplemente retornar
    } else if (userOption === '4') {
        // Opci√≥n 4: Consulta con Gemini usando el cat√°logo PDF y Base de Datos
        // Marcar que estamos esperando una consulta de este n√∫mero
        waitingForQuery[message.from] = true;
        
        // Despu√©s de un tiempo prudencial, liberamos el estado
        setTimeout(() => {
            waitingForQuery[message.from] = false;
        }, 120000); // 2 minutos
        
        await handleCatalogQuery(message);
    } else if (chatData.respuestas[userOption]) {
        console.log(`‚úÖ Respondiendo a la opci√≥n ${userOption}: ${chatData.respuestas[userOption]}`);
        message.reply(chatData.respuestas[userOption]);
    } else {
        console.log('‚ö†Ô∏è Opci√≥n inv√°lida. Mostrando men√∫ nuevamente...');
        message.reply("‚ö†Ô∏è Opci√≥n no v√°lida. Por favor, selecciona una de las opciones del men√∫.");
        await sendWelcomeMenu(message);
    }
}

async function handleCatalogQuery(message) {
    try {
        const exitCommands = ['salir', 'exit', 'menu', 'volver', 'regresar', 'terminar', 'finalizar', '!menu', '!start'];
        
        await message.reply("üîç *Modo Consulta al Cat√°logo y Base de Datos*\n\nAhora puedes hacer preguntas sobre nuestros productos.\nConsultaremos primero nuestra base de datos y luego el cat√°logo PDF.\nPara volver al men√∫ principal, escribe *salir* o *menu*.");
        
        // Configurar un listener para escuchar m√∫ltiples preguntas
        const continuousListener = async (msg) => {
            if (msg.from === message.from) {
                const userMessage = msg.body.trim().toLowerCase();
                
                if (exitCommands.includes(userMessage)) {
                    client.removeListener('message', continuousListener);
                    console.log('üëã Usuario solicit√≥ salir del modo consulta');
                    
                    waitingForQuery[msg.from] = false;
                    
                    await msg.reply('‚úÖ Has salido del modo consulta. Volviendo al men√∫ principal...');
                    await sendWelcomeMenu(msg);
                    return; 
                }
                
                console.log(`‚ùì Consulta continua recibida: ${msg.body}`);
                
                const processingMsg = await msg.reply('üîç Consultando base de datos y cat√°logo con Gemini AI. Esto puede tomar un momento...');
                
                try {
                    // Ahora processQueryWithGemini devuelve un booleano
                    const success = await processQueryWithGemini(msg);
                    
                    if (success) {
                        // Solo enviar el recordatorio de c√≥mo salir
                        await msg.reply("_Para salir de este modo escribe *salir* o *menu*_");
                    }
                } catch (queryError) {
                    console.error('‚ùå Error procesando consulta:', queryError);
                    await msg.reply(`‚ùå Error: ${queryError.message || 'Ocurri√≥ un problema al consultar la informaci√≥n.'}\n\n_Para salir de este modo escribe *salir* o *menu*_`);
                }
            }
        };
        
        // Registrar el listener para escuchar continuamente
        client.on('message', continuousListener);
        
    } catch (error) {
        console.error('‚ùå Error en el modo consulta continua:', error);
        message.reply('‚ùå Ocurri√≥ un error al procesar tu solicitud.');
        
        waitingForQuery[message.from] = false;
        await sendWelcomeMenu(message);
    }
}

// Funci√≥n para enviar im√°genes desde URL 
async function sendImageFromUrl(message, imageUrl, caption = '') {
    try {
        console.log(`üñºÔ∏è Intentando enviar imagen desde URL: ${imageUrl}`);
        
        // Verificar que la URL sea v√°lida
        if (!imageUrl || !imageUrl.startsWith('http')) {
            console.warn('‚ö†Ô∏è URL de imagen inv√°lida:', imageUrl);
            return message.reply('‚ö†Ô∏è No se pudo procesar la URL de la imagen.');
        }
        // Crear directorio temporal si no existe
        const tempDir = './temp_images';
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir);
        }
        // Generar un nombre de archivo √∫nico
        const fileName = `${tempDir}/img_${Date.now()}.jpg`;

        // Descargar la imagen
        console.log('‚¨áÔ∏è Descargando imagen...');
        const imageResponse = await axios({
            method: 'get',
            url: imageUrl,
            responseType: 'stream'
        });

        // Guardar la imagen en archivo temporal
        const writer = fs.createWriteStream(fileName);
        imageResponse.data.pipe(writer);

        // Esperar a que termine de escribir el archivo
        await new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
        });

        console.log(`‚úÖ Imagen descargada y guardada en: ${fileName}`);

        // Enviar la imagen como un mensaje de WhatsApp
        const media = MessageMedia.fromFilePath(fileName);
        await message.reply(media, null, { caption: caption });
        console.log('‚úÖ Imagen enviada exitosamente');

        // Eliminar archivo temporal despu√©s de enviarlo
        setTimeout(() => {
            try {
                fs.unlinkSync(fileName);
                console.log(`üóëÔ∏è Archivo temporal eliminado: ${fileName}`);
            } catch (err) {
                console.error(`‚ùå Error al eliminar archivo temporal: ${err.message}`);
            }
        }, 5000); // Esperar 5 segundos antes de eliminar
        return true;
    } catch (error) {
        console.error('‚ùå Error al enviar imagen:', error);
        message.reply(`‚ùå No se pudo enviar la imagen: ${error.message}`);
        return false;
    }
}

async function processQueryWithGemini(message) {
    try {
        const userQuery = message.body.trim();
        console.log(`üîç Procesando consulta: "${userQuery}"`);
        
        // 1. Primero buscamos en la base de datos PostgreSQL
        console.log('üóÑÔ∏è Consultando base de datos PostgreSQL...');
        const dbResults = await searchInDatabase(userQuery);
        
        // 2. Luego buscamos en el PDF del cat√°logo
        console.log('üìÑ Consultando cat√°logo PDF como respaldo...');
        const pdfResults = await searchInCatalogPDF(userQuery);
        
        // 3. Combinamos la informaci√≥n y generamos respuesta con Gemini
        console.log('ü§ñ Generando respuesta final con Gemini...');
        const combinedResponse = await generateGeminiResponse(userQuery, dbResults, pdfResults);

        const cleanedResponse = combinedResponse.replace(/üñºÔ∏è\s*\[Ver imagen\]\(https?:\/\/[^\s)]+\)/g, '');
        
        // 4. Env√≠a la respuesta de texto primero
        await message.reply(`üìä *Informaci√≥n del Producto*\n\n${cleanedResponse}`);
        
        // 5. Buscar URLs de im√°genes en la respuesta y enviarlas como im√°genes reales
        const imageUrlRegex = /\[Ver imagen\]\((https?:\/\/[^\s)]+)\)/g;
        let match;
        let imageCount = 0;
        let imagePromises = [];
        
        while ((match = imageUrlRegex.exec(combinedResponse)) !== null && imageCount < 5) {
            const imageUrl = match[1];
            console.log(`üñºÔ∏è Procesando imagen: ${imageUrl}`);
            
            // Peque√±a pausa para evitar saturar la API
            await new Promise(resolve => setTimeout(resolve, 1000 * imageCount));
            
            try {
                await sendImageFromUrl(message, imageUrl, `üñºÔ∏è *Imagen del producto ${imageCount + 1}*`);
                imageCount++;
            } catch (imgError) {
                console.error(`‚ùå Error al enviar imagen: ${imgError.message}`);
            }
        }
        
        // Devolver true para indicar √©xito, en lugar de la respuesta completa
        return true;
    } catch (error) {
        console.error('‚ùå Error en processQueryWithGemini:', error);
        throw new Error(`No se pudo procesar tu consulta: ${error.message}`);
    }
}

// Funci√≥n mejorada para buscar en la base de datos PostgreSQL
async function searchInDatabase(query) {
    const pgClient = new PgClient({
        user: process.env.DB_USER || 'postgres',
        host: process.env.DB_HOST || 'postgres', // Usar el nombre del servicio en docker-compose
        database: process.env.DB_NAME || 'catalogo_db',
        password: process.env.DB_PASSWORD || '123',
        port: parseInt(process.env.DB_PORT || '5432'),
    });
    
    try {
        await pgClient.connect();
        console.log('‚úÖ Conectado a PostgreSQL para consulta');
        
        // An√°lisis avanzado de la consulta
        const queryLower = query.toLowerCase();
        
        // Detectar categor√≠as comunes de productos
        const categorias = ['laptop', 'computadora', 'pc', 'celular', 'smartphone', 'tablet', 'monitor', 
            'impresora', 'scanner', 'teclado', 'mouse', 'aud√≠fono', 'auricular', 'c√°mara', 
            'disco', 'memoria', 'usb', 'router', 'televisor', 'tv'];
        
        // Detecci√≥n de rangos de precios
        const precioRegex = /(\d+)(?:\s*(?:a|y|hasta|entre|soles?|s\/\.?|dolares?|\$)\s*(\d+)?)?/gi;
        let minPrecio = null;
        let maxPrecio = null;
        let matchPrecio;
        
        while ((matchPrecio = precioRegex.exec(queryLower)) !== null) {
            const precio1 = parseInt(matchPrecio[1]);
            const precio2 = matchPrecio[2] ? parseInt(matchPrecio[2]) : null;
            
            if (precio1 && precio2) {
                
                minPrecio = Math.min(precio1, precio2);
                maxPrecio = Math.max(precio1, precio2);
                break;
            } else if (precio1) {
                
                const preContext = queryLower.substring(Math.max(0, matchPrecio.index - 15), matchPrecio.index);
                
                if (preContext.includes("menos") || preContext.includes("bajo") || 
                    preContext.includes("econ√≥mico") || preContext.includes("barato") || 
                    queryLower.includes("menos de") || queryLower.includes("m√°ximo")) {
                    maxPrecio = precio1;
                } else if (preContext.includes("m√°s") || preContext.includes("encima") || 
                          preContext.includes("mayor") || preContext.includes("m√≠nimo") ||
                          queryLower.includes("m√°s de") || queryLower.includes("m√≠nimo")) {
                    minPrecio = precio1;
                } else {
                    // Si no hay contexto claro, intentamos inferir por el resto de la consulta
                    if (queryLower.includes("menos") || queryLower.includes("m√°ximo") || 
                        queryLower.includes("hasta") || queryLower.includes("no m√°s")) {
                        maxPrecio = precio1;
                    } else if (queryLower.includes("m√°s") || queryLower.includes("m√≠nimo") || 
                              queryLower.includes("desde") || queryLower.includes("arriba")) {
                        minPrecio = precio1;
                    } else {
                        
                        minPrecio = Math.max(0, precio1 - Math.round(precio1 * 0.1)); // 10% menos
                        maxPrecio = precio1 + Math.round(precio1 * 0.1); // 10% m√°s
                    }
                }
            }
        }
        
        
        const palabrasComunes = ['que', 'cual', 'cuales', 'cuanto', 'como', 'donde', 'quien', 'cuando', 
            'hay', 'tiene', 'tengan', 'con', 'sin', 'por', 'para', 'entre', 'los', 'las',
            'uno', 'una', 'unos', 'unas', 'del', 'desde', 'hasta', 'hacia', 'durante',
            'mediante', 'seg√∫n', 'sin', 'sobre', 'tras', 'versus'];
        
        
        const palabrasClave = queryLower.split(/\s+/)
            .map(word => word.replace(/[^\w√°√©√≠√≥√∫√±]/gi, '').trim())
            .filter(word => word.length > 2)
            .filter(word => !palabrasComunes.includes(word));
        
        
        const categoriasMencionadas = categorias.filter(cat => 
            queryLower.includes(cat) || 
            palabrasClave.some(palabra => palabra.includes(cat))
        );
        
        console.log('üìä An√°lisis de la consulta:');
        console.log('- Palabras clave:', palabrasClave);
        console.log('- Rango de precios:', minPrecio, '-', maxPrecio);
        console.log('- Categor√≠as detectadas:', categoriasMencionadas);
        
        // Si no hay t√©rminos v√°lidos para buscar despu√©s del an√°lisis
        if (palabrasClave.length === 0 && categoriasMencionadas.length === 0 && !minPrecio && !maxPrecio) {
            return { 
                success: false, 
                products: [], 
                message: "No se encontraron t√©rminos v√°lidos para buscar" 
            };
        }
        
        // ===== CAMBIOS PRINCIPALES AQU√ç =====
        
        // Construir consulta SQL m√°s inteligente
        let conditions = [];
        let params = [];
        let paramIndex = 1;
        let hasPriceCondition = false;
        
        // PASO 1: Primero intentar una b√∫squeda espec√≠fica por precio si est√° presente
        if (minPrecio !== null || maxPrecio !== null) {
            let priceConditions = [];
            
            if (minPrecio !== null) {
                priceConditions.push(`precio >= $${paramIndex}`);
                params.push(minPrecio);
                paramIndex++;
            }
            
            if (maxPrecio !== null) {
                priceConditions.push(`precio <= $${paramIndex}`);
                params.push(maxPrecio);
                paramIndex++;
            }
            
            // Primera consulta: intentar s√≥lo con las condiciones de precio
            // MODIFICADO: Aseg√∫rate de seleccionar tambi√©n la columna imagen_url
            let sqlPriceQuery = 'SELECT *, imagen_url FROM productos';
            
            if (priceConditions.length > 0) {
                sqlPriceQuery += ' WHERE ' + priceConditions.join(' AND ');
                hasPriceCondition = true;
            }
            
            // A√±adir ordenamiento y l√≠mites
            sqlPriceQuery += ' ORDER BY precio ASC';
            
            console.log(`üîç Ejecutando consulta de precio b√°sica:`);
            console.log('Query:', sqlPriceQuery);
            console.log('Params:', params);
            
            const priceResult = await pgClient.query(sqlPriceQuery, params);
            
            if (priceResult.rows.length > 0) {
                console.log(`‚úÖ Encontrados ${priceResult.rows.length} productos por precio`);
                
                // Si tenemos resultados solo por precio, filtramos los resultados por relevancia
                let filteredResults = priceResult.rows;
                
                // Si hay palabras clave o categor√≠as, las usamos para filtrar y ordenar los resultados
                if (palabrasClave.length > 0 || categoriasMencionadas.length > 0) {
                    // Filtrar resultados por relevancia
                    filteredResults = priceResult.rows.map(product => {
                        let score = 0;
                        const productText = `${product.codigo} ${product.nombre} ${product.descripcion || ''} ${product.categoria}`.toLowerCase();
                        
                        // Puntuar por palabras clave
                        palabrasClave.forEach(palabra => {
                            if (productText.includes(palabra)) {
                                score += 1;
                            }
                        });
                        
                        // Puntuar por categor√≠as
                        categoriasMencionadas.forEach(categoria => {
                            if (product.categoria.toLowerCase().includes(categoria)) {
                                score += 2;
                            }
                        });
                        
                        return { product, score };
                    })
                    .sort((a, b) => b.score - a.score)
                    .map(item => item.product);
                }
                
                return { 
                    success: true,
                    products: filteredResults,
                    message: `Se encontraron ${filteredResults.length} productos en el rango de precio solicitado`
                };
            }
            
            // Si no hay resultados con s√≥lo precio, continuamos con la b√∫squeda completa
            console.log('‚ö†Ô∏è No se encontraron productos con el rango de precio exacto. Ampliando b√∫squeda...');
        }
        
        // PASO 2: Si no hay resultados solo por precio, construir una consulta m√°s completa
        
        // Reset de par√°metros para nueva consulta
        conditions = [];
        params = [];
        paramIndex = 1;
        
        // Condiciones por palabras clave - usar OR entre ellas
        if (palabrasClave.length > 0) {
            const keywordConditions = [];
            
            for (const palabra of palabrasClave) {
                if (palabra.length > 2) {  // Ignorar palabras muy cortas
                    const likeExpr = `%${palabra}%`;
                    keywordConditions.push(`(
                        LOWER(codigo) LIKE $${paramIndex} OR 
                        LOWER(nombre) LIKE $${paramIndex} OR 
                        LOWER(descripcion) LIKE $${paramIndex} OR
                        LOWER(categoria) LIKE $${paramIndex}
                    )`);
                    params.push(likeExpr);
                    paramIndex++;
                }
            }
            
            if (keywordConditions.length > 0) {
                // Usar OR entre palabras clave para b√∫squeda m√°s flexible
                conditions.push(`(${keywordConditions.join(' OR ')})`);
            }
        }
        
        // Condiciones por categor√≠a - separado de las palabras clave
        if (categoriasMencionadas.length > 0) {
            const categoryConditions = [];
            
            for (const categoria of categoriasMencionadas) {
                categoryConditions.push(`LOWER(categoria) LIKE $${paramIndex}`);
                params.push(`%${categoria}%`);
                paramIndex++;
            }
            
            conditions.push(`(${categoryConditions.join(' OR ')})`);
        }
        
        // A√±adir condiciones de precio - m√°s flexibles en la b√∫squeda completa
        if (minPrecio !== null) {
            // Hacemos el rango un poco m√°s amplio para aumentar resultados
            conditions.push(`precio >= $${paramIndex}`);
            const flexibleMinPrice = Math.max(0, minPrecio - Math.round(minPrecio * 0.05)); // 5% menos
            params.push(flexibleMinPrice);
            paramIndex++;
        }
        
        if (maxPrecio !== null) {
            // Hacemos el rango un poco m√°s amplio para aumentar resultados
            conditions.push(`precio <= $${paramIndex}`);
            const flexibleMaxPrice = maxPrecio + Math.round(maxPrecio * 0.05); // 5% m√°s
            params.push(flexibleMaxPrice);
            paramIndex++;
        }
        
        // Construir la consulta SQL final
        // MODIFICADO: Aseg√∫rate de seleccionar tambi√©n la columna imagen_url
        let sqlQuery = 'SELECT *, imagen_url FROM productos';
        
        if (conditions.length > 0) {
            sqlQuery += ' WHERE ' + conditions.join(' AND ');
        }
        
        sqlQuery += ' ORDER BY precio ASC';
        
        console.log(`üîç Ejecutando consulta SQL completa:`);
        console.log('Query:', sqlQuery);
        console.log('Params:', params);
        
        const result = await pgClient.query(sqlQuery, params);
        
        if (result.rows.length > 0) {
            console.log(`‚úÖ Encontrados ${result.rows.length} productos en la base de datos`);
            return { 
                success: true,
                products: result.rows,
                message: `Se encontraron ${result.rows.length} productos relacionados`
            };
        } else {
            console.log('‚ö†Ô∏è No se encontraron productos con la b√∫squeda completa');
            
            // Intentar una b√∫squeda a√∫n m√°s flexible usando OR entre todas las condiciones
            console.log('üîÑ Intentando b√∫squeda m√°s flexible...');
            
            // Construir una consulta m√°s permisiva usando OR entre todas las condiciones
            // MODIFICADO: Aseg√∫rate de seleccionar tambi√©n la columna imagen_url
            let flexibleQuery = 'SELECT *, imagen_url FROM productos WHERE ';
            flexibleQuery += conditions.join(' OR ');
            flexibleQuery += ' ORDER BY precio ASC';
            
            const flexibleResult = await pgClient.query(flexibleQuery, params);
            
            if (flexibleResult.rows.length > 0) {
                console.log(`‚úÖ B√∫squeda flexible encontr√≥ ${flexibleResult.rows.length} productos`);
                return { 
                    success: true,
                    products: flexibleResult.rows,
                    message: `Se encontraron ${flexibleResult.rows.length} productos relacionados (b√∫squeda ampliada)`
                };
            } else {
                // Si todo lo anterior falla, ampliar a√∫n m√°s el rango de precios
                if (minPrecio !== null || maxPrecio !== null) {
                    console.log('üîÑ √öltimo intento: ampliando rango de precios significativamente...');
                    
                    params = [];
                    paramIndex = 1;
                    // MODIFICADO: Aseg√∫rate de seleccionar tambi√©n la columna imagen_url
                    let lastQuery = 'SELECT *, imagen_url FROM productos WHERE ';
                    
                    if (minPrecio !== null) {
                        // Ampliamos el rango significativamente
                        const veryFlexibleMinPrice = Math.max(0, minPrecio - Math.round(minPrecio * 0.15)); // 15% menos
                        lastQuery += `precio >= $${paramIndex}`;
                        params.push(veryFlexibleMinPrice);
                        paramIndex++;
                    }
                    
                    if (maxPrecio !== null) {
                        if (minPrecio !== null) lastQuery += ' AND ';
                        
                        const veryFlexibleMaxPrice = maxPrecio + Math.round(maxPrecio * 0.15); 
                        lastQuery += `precio <= $${paramIndex}`;
                        params.push(veryFlexibleMaxPrice);
                        paramIndex++;
                    }
                    
                    lastQuery += ' ORDER BY precio ASC';
                    
                    const lastResult = await pgClient.query(lastQuery, params);
                    
                    if (lastResult.rows.length > 0) {
                        console.log(`‚úÖ B√∫squeda con rango ampliado encontr√≥ ${lastResult.rows.length} productos`);
                        return { 
                            success: true,
                            products: lastResult.rows,
                            message: `Se encontraron ${lastResult.rows.length} productos en un rango de precio similar (¬±15%)`
                        };
                    }
                }
            }
            
            return { 
                success: false, 
                products: [], 
                message: "No se encontraron productos que coincidan con tu b√∫squeda" 
            };
        }
    } catch (dbError) {
        console.error('‚ùå Error en la consulta a la base de datos:', dbError);
        return { 
            success: false, 
            products: [], 
            message: `Error consultando base de datos: ${dbError.message}` 
        };
    } finally {
        await pgClient.end();
        console.log('‚úÖ Conexi√≥n a PostgreSQL cerrada');
    }
}

function splitTextIntoChunks(text, chunkSize = 250, chunkOverlap = 80) {
    const chunks = [];
    const sentences = text.split('\n').filter(sentence => sentence.trim() !== '');
    
    let currentChunk = '';
    
    for (const sentence of sentences) {
        if (currentChunk.length + sentence.length > chunkSize) {
            if (currentChunk) {
                chunks.push(currentChunk);
            }
            
            if (currentChunk && chunkOverlap > 0) {
                const words = currentChunk.split(' ');
                const overlapWords = words.slice(-Math.floor(chunkOverlap / 5)); 
                currentChunk = overlapWords.join(' ') + ' ' + sentence;
            } else {
                currentChunk = sentence;
            }
        } else {
            currentChunk = currentChunk ? `${currentChunk}\n${sentence}` : sentence;
        }
    }
    
    if (currentChunk) {
        chunks.push(currentChunk);
    }
    
    return chunks;
}

// Mejora en la b√∫squeda de chunks relevantes
function findRelevantChunks(chunks, query, maxChunks = 5) {
    const lowerQuery = query.toLowerCase();
    
    
    const stopWords = ['el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas', 'y', 'o', 'a', 'ante', 'bajo', 'con', 'de', 'desde', 'en', 'entre', 'hacia', 'hasta', 'para', 'por', 'seg√∫n', 'sin', 'sobre', 'tras'];
    const queryTerms = lowerQuery
        .split(/\s+/)
        .map(term => term.replace(/[^\w√°√©√≠√≥√∫√±]/gi, ''))
        .filter(term => term.length > 2 && !stopWords.includes(term));
    
    // Extraer posibles n√∫meros del rango de precios
    const priceNumbers = [];
    const priceMatches = lowerQuery.match(/\d+/g);
    if (priceMatches) {
        priceMatches.forEach(match => {
            priceNumbers.push(parseInt(match));
        });
    }
    
    // Usar TF-IDF simplificado para puntuaci√≥n
    const scoredChunks = chunks.map(chunk => {
        const lowerChunk = chunk.toLowerCase();
        let score = 0;
        
        // Puntuaci√≥n por t√©rminos de consulta
        queryTerms.forEach(term => {
            // Aumentar la puntuaci√≥n basada en la importancia del t√©rmino
            const matches = lowerChunk.split(term).length - 1;
            if (matches > 0) {
                // T√©rminos m√°s largos valen m√°s
                score += matches * (term.length / 3);
            }
        });
        
        // Puntuaci√≥n adicional por rangos de precios
        if (priceNumbers.length > 0) {
            const chunkNumbers = lowerChunk.match(/\d+/g) || [];
            chunkNumbers.forEach(chunkNum => {
                const num = parseInt(chunkNum);
                priceNumbers.forEach(priceNum => {
                    // Si el n√∫mero en el chunk est√° cercano (¬±10%) a alg√∫n n√∫mero de la consulta
                    if (Math.abs(num - priceNum) <= priceNum * 0.1) {
                        score += 2;
                    }
                });
            });
        }
        
        // Bonificaci√≥n para chunks que contienen m√∫ltiples t√©rminos de la consulta
        const termMatches = queryTerms.filter(term => lowerChunk.includes(term)).length;
        if (termMatches > 1) {
            score *= (1 + (termMatches / queryTerms.length));
        }
        
        return { chunk, score };
    });
    
    const relevantChunks = scoredChunks
        .sort((a, b) => b.score - a.score)
        .slice(0, maxChunks)
        .map(item => item.chunk);
    
    console.log(`üîç Puntuaciones m√°s altas: ${scoredChunks.slice(0, 3).map(c => c.score.toFixed(2)).join(', ')}`);
    
    return relevantChunks;
}

// Funci√≥n para buscar en el PDF del cat√°logo
async function searchInCatalogPDF(query) {
    try {
        console.log('üìö Buscando en cat√°logo PDF:', query);
        
        // Ruta al archivo PDF del cat√°logo
        const pdfPath = './catalogo_.pdf'; // Ajusta esta ruta seg√∫n donde tengas tu PDF
        
        // Verificar si el archivo existe
        if (!fs.existsSync(pdfPath)) {
            console.warn('‚ö†Ô∏è El archivo PDF del cat√°logo no existe en la ruta especificada');
            return { 
                success: false, 
                chunks: [], 
                message: "No se encontr√≥ el archivo del cat√°logo" 
            };
        }
        
        // Leer el archivo PDF
        const dataBuffer = fs.readFileSync(pdfPath);
        const data = await pdf(dataBuffer);
        
        // Extraer el texto del PDF
        const pdfText = data.text;
        
        // Dividir el texto en fragmentos para un procesamiento m√°s eficiente
        const chunks = splitTextIntoChunks(pdfText);
        console.log(`üìÑ PDF dividido en ${chunks.length} fragmentos para an√°lisis`);
        
        // Encontrar los fragmentos m√°s relevantes para la consulta
        const relevantChunks = findRelevantChunks(chunks, query);
        console.log(`üîç Se encontraron ${relevantChunks.length} fragmentos relevantes en el PDF`);
        
        if (relevantChunks.length > 0) {
            return { 
                success: true, 
                chunks: relevantChunks,
                message: `Se encontraron ${relevantChunks.length} secciones relevantes en el cat√°logo`
            };
        } else {
            return { 
                success: false, 
                chunks: [],
                message: "No se encontr√≥ informaci√≥n relevante en el cat√°logo" 
            };
        }
    } catch (pdfError) {
        console.error('‚ùå Error procesando el PDF:', pdfError);
        return { 
            success: false, 
            chunks: [],
            message: `Error al procesar el cat√°logo PDF: ${pdfError.message}` 
        };
    }
}

// Funci√≥n para buscar en el PDF del cat√°logo
async function generateGeminiResponse(query, dbResults, pdfResults) {
    let dbContext = '';
    if (dbResults.success && dbResults.products.length > 0) {
        dbContext = "### INFORMACI√ìN DE BASE DE DATOS\n";
        
        const productsToInclude = dbResults.products.slice(0, 5);
        
        productsToInclude.forEach((product, index) => {
            dbContext += `\nPRODUCTO ${index + 1}:\n`;
            dbContext += `C√≥digo: ${product.codigo}\n`;
            dbContext += `Nombre: ${product.nombre}\n`;
            dbContext += `Descripci√≥n: ${product.descripcion || 'No disponible'}\n`;
            dbContext += `Precio: ${product.precio}\n`;
            dbContext += `Stock: ${product.stock}\n`;
            dbContext += `Categor√≠a: ${product.categoria}\n`;
            
            // MODIFICADO: Incluir la URL de la imagen si est√° disponible
            if (product.imagen_url) {
                dbContext += `Imagen: ${product.imagen_url}\n`;
            }
        });
            
        if (dbResults.products.length > 5) {
            dbContext += `\n(Y ${dbResults.products.length - 5} productos m√°s encontrados)\n`;
        }
    }
        
    let pdfContext = '';
    if (pdfResults.success && pdfResults.chunks.length > 0) {
        pdfContext = "\n### INFORMACI√ìN ADICIONAL DEL CAT√ÅLOGO PDF\n";
        pdfContext += pdfResults.chunks.join("\n\n");
    }
        
    const prompt = `### CONSULTA DEL USUARIO
    "${query}"
    
    ${dbContext}
    
    ${pdfContext}
    
    ### OBJETIVO
    Proporcionar una respuesta clara, precisa y estructurada sobre la informaci√≥n solicitada.
    
    ### INSTRUCCIONES DE CONTENIDO
    1. Responde EXCLUSIVAMENTE con informaci√≥n presente en el contexto proporcionado
    2. Da MAYOR PRIORIDAD a la informaci√≥n de la base de datos cuando est√© disponible
    3. Complementa con informaci√≥n del cat√°logo PDF si es necesario
    4. Si la informaci√≥n solicitada no aparece en ninguna fuente, indica: "Esta informaci√≥n no est√° disponible en nuestro sistema"
    5. No inventes ni asumas informaci√≥n que no est√© expl√≠citamente mencionada
    6. Mant√©n SIEMPRE el idioma espa√±ol en toda la respuesta
    7. Extrae las caracter√≠sticas t√©cnicas m√°s importantes y omite las secundarias
    8. Identifica el rango de precios cuando se comparan m√∫ltiples productos
    9. Destaca la disponibilidad de stock solo cuando sea relevante para la consulta
    10. Prioriza caracter√≠sticas relevantes seg√∫n la consulta del usuario
    11. IMPORTANTE: Cuando est√©n disponibles, incluye las URLs de las im√°genes de los productos
    
    ### INSTRUCCIONES DE FORMATO
    1. ESTRUCTURA GENERAL:      
       - Inicia con un t√≠tulo claro y descriptivo en negrita relacionado con la consulta
       - Divide la informaci√≥n en secciones l√≥gicas con subt√≠tulos cuando sea apropiado
       - Utiliza m√°ximo 3-4 oraciones por secci√≥n o p√°rrafo
       - Concluye con una l√≠nea de resumen o recomendaci√≥n cuando sea relevante
       - Si hay un producto claramente m√°s adecuado para la consulta, dest√°calo primero
    
    2. PARA LISTADOS DE PRODUCTOS:
       - Usa vi√±etas (‚Ä¢) para cada producto
       - Formato: "‚Ä¢ *Nombre del producto*: caracter√≠sticas principales, precio"
       - M√°ximo 5 productos listados
       - Ordena los productos por relevancia a la consulta, no solo por precio
       - Destaca con üîπ el producto m√°s relevante seg√∫n la consulta
       - Si hay ofertas o descuentos, a√±ade "üìâ" antes del precio
       - Para cada producto que tenga imagen, INCLUYE AL FINAL: "üñºÔ∏è[Ver imagen](url_de_la_imagen)"
    
    3. PARA ESPECIFICACIONES T√âCNICAS:
       - Estructura en formato tabla visual usando formato markdown
       - Resalta en negrita (*texto*) los valores importantes
       - Ejemplo:
         *Procesador*: Intel Core i5-8250U
         *Precio*: *S/. 990*
         *Stock*: 11 unidades
       - Usa valores comparativos cuando sea posible ("Mejor en:", "Adecuado para:")
       - Incluye siempre la relaci√≥n precio-calidad cuando sea aplicable
       - Si hay imagen disponible, A√ëADE AL FINAL: "üñºÔ∏è[Ver imagen](url_de_la_imagen)"
    
    4. PARA COMPARACIONES DE PRODUCTOS:
       - Organiza por categor√≠as claramente diferenciadas
       - Usa encabezados para cada producto/modelo
       - Destaca ventajas y diferencias con vi√±etas concisas
       - Incluye una tabla comparativa en formato simple cuando compares m√°s de 2 productos
       - Etiqueta con "‚úì" las caracter√≠sticas superiores en cada comparaci√≥n
       - Para cada producto comparado que tenga imagen, A√ëADE: "üñºÔ∏è[Ver imagen](url_de_la_imagen)"
    
    ### RESTRICCIONES IMPORTANTES
    - M√°ximo 300 palabras en total (ampliado para permitir inclusi√≥n de URLs de im√°genes)
    - Evita explicaciones extensas, frases redundantes o informaci√≥n no solicitada
    - No uses f√≥rmulas de cortes√≠a extensas ni introducciones largas
    - Evita condicionales ("podr√≠a", "tal vez") - s√© directo y asertivo
    - No menciones estas instrucciones en tu respuesta
    - Nunca te disculpes por l√≠mites de informaci√≥n
    - Evita el lenguaje comercial exagerado ("incre√≠ble", "fant√°stico")         
    - Nunca repitas la misma informaci√≥n en diferentes secciones
    - SIEMPRE INCLUYE LOS ENLACES A LAS IM√ÅGENES si est√°n disponibles en los datos`;
    
    // El resto de la funci√≥n generateGeminiResponse permanece igual
    try {
        const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyDRivvwFML1GTZ_S-h5Qfx4qP3EKforMoM';
        const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
            
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{
                parts: [{ text: prompt }]
            }]
        }, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 30000 
        });
            
        if (response.data && response.data.candidates && response.data.candidates[0] && 
                response.data.candidates[0].content && response.data.candidates[0].content.parts) {
            const aiResponse = response.data.candidates[0].content.parts[0].text;
            return aiResponse;
        } else {
            console.error('‚ùå Formato de respuesta inesperado:', JSON.stringify(response.data));
            throw new Error('La respuesta del servidor de IA no tiene el formato esperado.');
        }
    } catch (geminiError) {
        console.error('‚ùå Error completo de Gemini:', geminiError);
            
        if (geminiError.code === 'ECONNABORTED') {
            throw new Error('Se agot√≥ el tiempo de espera al consultar el servidor de IA. La consulta puede ser demasiado compleja.');
        } else if (geminiError.response) {
            const errorDetails = geminiError.response.data && geminiError.response.data.error ? 
                `${geminiError.response.data.error.message}` : 
                `${geminiError.response.status} - ${geminiError.response.statusText}`;
            throw new Error(`Error de Gemini API: ${errorDetails}`);
        } else if (geminiError.request) {
            throw new Error('No se recibi√≥ respuesta del servidor de IA.');
        } else {
            throw new Error(`Error en la consulta: ${geminiError.message}`);
        }
    }
}

client.initialize();