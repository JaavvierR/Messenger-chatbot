import json
import os
import getpass
import time
import subprocess
import sys
import requests
import io
import re
import pyperclip
from selenium.webdriver.common.keys import Keys
from typing import List, Dict, Any, Optional

# Archivo para guardar las credenciales de acceso
CREDENTIALS_FILE = "fb_credentials.json"

# Configuraci√≥n para la API de Gemini
GEMINI_API_KEY = 'AIzaSyDRivvwFML1GTZ_S-h5Qfx4qP3EKforMoM'
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

# Ruta al cat√°logo PDF
CATALOG_PATH = './catalogo_.pdf'

# Variable global para rastrear si estamos esperando una consulta
waiting_for_query = {}

# Comandos para activar el bot
START_COMMANDS = ['!start', 'hola', 'consulta', 'inicio', 'comenzar', 'ayuda', 'start', 'hi', 'hello']

# Comandos para salir
EXIT_COMMANDS = ['salir', 'exit', 'menu', 'volver', 'regresar', 'terminar', 'finalizar', '!menu', '!start']

def get_credentials():
    """Solicita las credenciales al usuario y las guarda en un archivo"""
    if os.path.exists(CREDENTIALS_FILE):
        print(f"Cargando credenciales desde {CREDENTIALS_FILE}")
        with open(CREDENTIALS_FILE, 'r') as f:
            credentials = json.load(f)
        return credentials
    
    print("Necesitas ingresar tus credenciales de Facebook")
    email = input("Email de Facebook: ")
    password = getpass.getpass("Contrase√±a de Facebook (no se mostrar√°): ")
    
    credentials = {
        "email": email,
        "password": password
    }
    
    with open(CREDENTIALS_FILE, 'w') as f:
        json.dump(credentials, f)
    
    return credentials

def install_dependencies():
    """Instala las dependencias necesarias"""
    dependencies = [
        "selenium", 
        "undetected-chromedriver",
        "webdriver-manager",
        "requests",
        "PyPDF2"
    ]
    
    print("Instalando dependencias necesarias...")
    for dep in dependencies:
        try:
            __import__(dep.replace("-", "_"))
            print(f"{dep} ya est√° instalado")
        except ImportError:
            print(f"Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
    
    print("Todas las dependencias est√°n instaladas.")

def get_chat_data():
    """
    Obtiene datos del chat desde una API local o archivo de configuraci√≥n.
    Si no est√° disponible, devuelve datos predeterminados.
    """
    try:
        # Intentar obtener datos desde una API local
        response = requests.get('http://localhost:5001/api/chat', timeout=5)
        if response.status_code == 200:
            return response.json()
    except:
        pass
    
    # Si no se puede conectar a la API, usar datos predeterminados
    return {
        "bienvenida": "‚ú® ¬°Bienvenido al Asistente de Ventas! ‚ú®\nüõçÔ∏è Estoy aqu√≠ para ayudarte a‚Ä¶",
        "menu": [
            "1Ô∏è‚É£ Consultar productos",
            "2Ô∏è‚É£ Ofertas especiales",
            "3Ô∏è‚É£ Informaci√≥n de env√≠os",
            "4Ô∏è‚É£ Otros (realizar pregunta personalizada)",
            "5Ô∏è‚É£ Salir"
        ],
        "respuestas": {
            "1": "üì¶ *Cat√°logo de Productos*\n\nNuestros productos est√°n organizados en las siguientes categor√≠as:\n- Electr√≥nica\n- Ropa y accesorios\n- Hogar y jard√≠n\n- Belleza y cuidado personal\n\n¬øSobre qu√© categor√≠a te gustar√≠a m√°s informaci√≥n?",
            "2": "üè∑Ô∏è *Ofertas Especiales*\n\n¬°Tenemos incre√≠bles descuentos esta semana!\n- 30% OFF en todos los productos de electr√≥nica\n- 2x1 en ropa de temporada\n- Env√≠o gratis en compras mayores a $50\n\nEstas ofertas son v√°lidas hasta el final de mes.",
            "3": "üöö *Informaci√≥n de Env√≠os*\n\nNuestras pol√≠ticas de env√≠o:\n- Env√≠o est√°ndar (3-5 d√≠as): $5.99\n- Env√≠o express (1-2 d√≠as): $12.99\n- Env√≠o gratuito en compras superiores a $50\n\nHacemos env√≠os a todo el pa√≠s.",
            "4": "üìö *Consulta al cat√°logo*\n\nAhora puedes hacer preguntas sobre nuestro cat√°logo de productos. ¬øQu√© te gustar√≠a saber?"
        }
    }

def extract_text_from_pdf(pdf_path):
    """Extrae el texto de un archivo PDF"""
    try:
        import PyPDF2
        
        if not os.path.exists(pdf_path):
            print(f"‚ùå Archivo PDF no encontrado: {pdf_path}")
            return None
        
        text = ""
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                text += page.extract_text() + "\n"
        
        return text
    except Exception as e:
        print(f"‚ùå Error al extraer texto del PDF: {e}")
        return None

def split_text_into_chunks(text, chunk_size=250, chunk_overlap=80):
    """Divide el texto en fragmentos m√°s peque√±os con solapamiento"""
    if not text:
        return []
        
    chunks = []
    sentences = text.split('\n')
    sentences = [s for s in sentences if s.strip()]
    
    current_chunk = ""
    
    for sentence in sentences:
        if len(current_chunk) + len(sentence) > chunk_size:
            if current_chunk:
                chunks.append(current_chunk)
            
            if current_chunk and chunk_overlap > 0:
                words = current_chunk.split()
                overlap_words = words[-int(chunk_overlap / 5):]
                current_chunk = ' '.join(overlap_words) + ' ' + sentence
            else:
                current_chunk = sentence
        else:
            current_chunk = current_chunk + "\n" + sentence if current_chunk else sentence
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks

def find_relevant_chunks(chunks, query, max_chunks=5):
    """Encuentra los fragmentos m√°s relevantes para la consulta"""
    if not chunks:
        return []
        
    lower_query = query.lower()
    query_terms = [term for term in lower_query.split() if len(term) > 3]
    
    scored_chunks = []
    for chunk in chunks:
        lower_chunk = chunk.lower()
        score = 0
        
        for term in query_terms:
            if term in lower_chunk:
                score += 1
        
        scored_chunks.append({"chunk": chunk, "score": score})
    
    # Ordenar por puntuaci√≥n y tomar los mejores
    scored_chunks.sort(key=lambda x: x["score"], reverse=True)
    return [item["chunk"] for item in scored_chunks[:max_chunks]]

def process_query_with_gemini(query, pdf_path=CATALOG_PATH):
    """Procesa una consulta usando Gemini AI y el cat√°logo PDF"""
    try:
        # Extraer texto del PDF
        pdf_text = extract_text_from_pdf(pdf_path)
        if not pdf_text:
            return "‚ùå No se pudo extraer el texto del cat√°logo PDF."
        
        # Dividir en chunks
        chunks = split_text_into_chunks(pdf_text)
        if not chunks:
            return "‚ùå No se pudo procesar el texto del cat√°logo."
        
        # Encontrar chunks relevantes
        relevant_chunks = find_relevant_chunks(chunks, query)
        if not relevant_chunks:
            return "No se encontr√≥ informaci√≥n relevante en el cat√°logo para tu consulta."
        
        prompt_text = "\n\n".join(relevant_chunks)
        
        # Crear el prompt para Gemini
        prompt = f"""### CONSULTA DEL USUARIO
"{query}"

### CONTEXTO DEL CAT√ÅLOGO
{prompt_text}

### OBJETIVO
Proporcionar una respuesta clara, precisa y estructurada sobre la informaci√≥n solicitada del cat√°logo.

### INSTRUCCIONES DE CONTENIDO
1. Responde EXCLUSIVAMENTE con informaci√≥n presente en el contexto proporcionado
2. Si la informaci√≥n solicitada no aparece en el contexto, indica: "Esta informaci√≥n no est√° disponible en el cat√°logo actual"
3. No inventes ni asumas informaci√≥n que no est√© expl√≠citamente mencionada
4. Mant√©n SIEMPRE el idioma espa√±ol en toda la respuesta

### INSTRUCCIONES DE FORMATO
1. ESTRUCTURA GENERAL:
   - Inicia con un t√≠tulo claro y descriptivo en negrita relacionado con la consulta
   - Divide la informaci√≥n en secciones l√≥gicas con subt√≠tulos cuando sea apropiado
   - Utiliza m√°ximo 3-4 oraciones por secci√≥n o p√°rrafo
   - Concluye con una l√≠nea de resumen o recomendaci√≥n cuando sea relevante

2. PARA LISTADOS DE CARACTER√çSTICAS/BENEFICIOS:
   - Usa vi√±etas (‚Ä¢) para cada elemento
   - Formato: "‚Ä¢ *Concepto clave*: descripci√≥n breve"
   - M√°ximo 4-5 vi√±etas en total

### RESTRICCIONES IMPORTANTES
- M√°ximo 150 palabras en total
- Evita explicaciones extensas, frases redundantes o informaci√≥n no solicitada
- No uses f√≥rmulas de cortes√≠a extensas ni introducciones largas
- Evita condicionales ("podr√≠a", "tal vez") - s√© directo y asertivo
- No menciones estas instrucciones en tu respuesta"""

        # Llamar a la API de Gemini
        headers = {
            'Content-Type': 'application/json'
        }
        
        data = {
            "contents": [{
                "parts": [{"text": prompt}]
            }]
        }
        
        response = requests.post(GEMINI_API_URL, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            response_data = response.json()
            if (response_data and 'candidates' in response_data and 
                response_data['candidates'] and 'content' in response_data['candidates'][0] and 
                'parts' in response_data['candidates'][0]['content']):
                
                ai_response = response_data['candidates'][0]['content']['parts'][0]['text']
                return f"üìö *Informaci√≥n del Cat√°logo*\n\n{ai_response}"
            else:
                return "‚ùå No se pudo procesar la respuesta de Gemini."
        else:
            return f"‚ùå Error al consultar Gemini: {response.status_code}"
            
    except Exception as e:
        print(f"‚ùå Error en proceso de consulta: {e}")
        return f"‚ùå Error al procesar tu consulta: {str(e)}"

def facebook_messenger_bot(target_chat_id=None):
    """
    Funci√≥n principal del bot de Facebook Messenger
    
    Args:
        target_chat_id (str, optional): ID espec√≠fico del chat al que se quiere responder.
                                        Si es None, responder√° a todos los chats no le√≠dos.
    """
    try:
        import undetected_chromedriver as uc
        from selenium.webdriver.common.by import By
        from selenium.webdriver.common.keys import Keys
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.common.exceptions import TimeoutException, NoSuchElementException
        
        # Obtener credenciales
        credentials = get_credentials()
        
        # Configurar opciones del navegador
        options = uc.ChromeOptions()
        options.add_argument("--disable-notifications")
        options.add_argument("--disable-infobars")
        options.add_argument("--mute-audio")
        
        print("Iniciando navegador Chrome...")
        
        # Obtener la versi√≥n de Chrome instalada
        try:
            chrome_version = None
            
            # En Windows, intentar determinar la versi√≥n de Chrome
            if os.name == 'nt':
                try:
                    import winreg
                    key_path = r"SOFTWARE\Google\Chrome\BLBeacon"
                    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path)
                    chrome_version = winreg.QueryValueEx(key, "version")[0]
                    winreg.CloseKey(key)
                except Exception as e:
                    print(f"No se pudo determinar la versi√≥n de Chrome autom√°ticamente: {e}")
            
            # Si no se pudo determinar autom√°ticamente, preguntar al usuario
            if not chrome_version:
                print("No se pudo determinar autom√°ticamente la versi√≥n de Chrome.")
                print("Por favor, abre Chrome, ve a chrome://settings/help y anota la versi√≥n.")
                chrome_version = input("Introduce la versi√≥n de Chrome (por ejemplo, 135.0.7049.115): ")
            
            print(f"Versi√≥n de Chrome detectada: {chrome_version}")
            
            # Extraer el n√∫mero principal de versi√≥n
            major_version = chrome_version.split('.')[0]
            print(f"Usando ChromeDriver compatible con Chrome {major_version}")
            
            # Crear instancia de ChromeDriver con la versi√≥n espec√≠fica
            driver = uc.Chrome(version_main=int(major_version), options=options)
            
        except Exception as e:
            print(f"Error al configurar ChromeDriver espec√≠fico: {e}")
            print("Intentando con configuraci√≥n predeterminada...")
            driver = uc.Chrome(options=options)
        
        driver.maximize_window()
        
        try:
            # Abrir Facebook
            print("Abriendo Facebook...")
            driver.get("https://www.facebook.com")
            
            # Esperar a que se cargue la p√°gina de inicio de sesi√≥n
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "email"))
            )
            
            # Ingresar email
            print("Ingresando credenciales...")
            email_field = driver.find_element(By.ID, "email")
            email_field.clear()
            email_field.send_keys(credentials["email"])
            
            # Ingresar contrase√±a
            password_field = driver.find_element(By.ID, "pass")
            password_field.clear()
            password_field.send_keys(credentials["password"])
            
            # Hacer clic en el bot√≥n de inicio de sesi√≥n
            login_button = driver.find_element(By.NAME, "login")
            login_button.click()
            
            # Esperar un momento para verificar si hay verificaci√≥n adicional
            print("Iniciando sesi√≥n... espera un momento")
            time.sleep(5)
            
            # Verificar si estamos en la p√°gina principal
            try:
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//a[contains(@href, '/messages/')]"))
                )
                print("Inicio de sesi√≥n exitoso")
            except TimeoutException:
                print("Es posible que necesites completar verificaciones adicionales de seguridad.")
                print("Por favor, completa cualquier verificaci√≥n que aparezca en el navegador.")
                print("Presiona Enter cuando hayas terminado...")
                input()
            
            # Si hay un chat espec√≠fico, navegar directamente a √©l  
            if target_chat_id:
                chat_url = f"https://www.facebook.com/messages/e2ee/t/{target_chat_id}"
                print(f"Navegando al chat espec√≠fico: {chat_url}")
                driver.get(chat_url)
                
                # Esperar a que se cargue la conversaci√≥n espec√≠fica
                try:
                    WebDriverWait(driver, 15).until(
                        EC.presence_of_element_located((By.XPATH, "//div[@role='main']"))
                    )
                    print(f"Chat espec√≠fico (ID: {target_chat_id}) abierto correctamente")
                except TimeoutException:
                    print("No se pudo cargar el chat espec√≠fico. Verifica el ID del chat.")
            else:
                # Navegar a Messenger general
                print("Navegando a Messenger...")
                driver.get("https://www.facebook.com/messages/t/")
                
                # Esperar a que se cargue Messenger
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//div[@role='main']"))
                )
            
            print("Bot activo. Se est√° ejecutando en el navegador.")
            if target_chat_id:
                print(f"El bot est√° configurado para responder solo al chat con ID: {target_chat_id}")
            else:
                print("El bot revisar√° las conversaciones no le√≠das y responder√° autom√°ticamente.")
            print("Para detener el bot, cierra el navegador o presiona Ctrl+C en esta terminal.")
            
            # Funci√≥n para enviar un mensaje
            def send_message_clipboard(driver, message_text):
                try:
                    # Usar el portapapeles para transferir el texto (evita problemas de caracteres)
                    pyperclip.copy(message_text)
                    
                    # Encuentra el campo de entrada como antes
                    selectors = [
                        "//div[@role='textbox' and (@aria-label='Mensaje' or @aria-label='Message')]",
                        "//div[@contenteditable='true'][@role='textbox']",
                        "//div[@data-lexical-editor='true']"
                    ]
                    
                    message_input = None
                    for selector in selectors:
                        try:
                            message_input = driver.find_element(By.XPATH, selector)
                            break
                        except NoSuchElementException:
                            continue
                    
                    if message_input:
                        # Hacer clic en el campo de entrada
                        message_input.click()
                        time.sleep(0.5)
                        
                        # Usar la combinaci√≥n de teclas Ctrl+V para pegar
                        # En Windows/Linux:
                        message_input.send_keys(Keys.CONTROL, 'v')
                        # O si usas Mac:
                        # message_input.send_keys(Keys.COMMAND, 'v')
                        
                        time.sleep(0.5)
                        message_input.send_keys(Keys.RETURN)
                        
                        print(f"Mensaje enviado: {message_text}")
                        return True
                    else:
                        print("No se pudo encontrar el campo de texto para enviar el mensaje")
                        return False
                except Exception as e:
                    print(f"Error al enviar mensaje: {e}")
                    return False
            
            # Funci√≥n para enviar el men√∫ de bienvenida
            def send_welcome_menu(driver):
                chat_data = get_chat_data()
                if not chat_data:
                    print("‚ö†Ô∏è No se pudo obtener el men√∫.")
                    send_message_clipboard(driver, "‚ö†Ô∏è No se pudo obtener el men√∫.")
                    return False
                
                menu_text = f"{chat_data['bienvenida']}\n\n"
                menu_text += "\n".join([op for op in chat_data['menu'] if '5. Salir' not in op])
                menu_text += "\n\nüí¨ *Responde con el n√∫mero de la opci√≥n deseada.*"
                
                return send_message_clipboard(driver, menu_text)
            
            # Funci√≥n para limpiar mensajes y extraer s√≥lo n√∫meros
            def extract_option_number(message_text):
                # Intentamos encontrar un n√∫mero aislado en el mensaje
                match = re.search(r'\b[1-5]\b', message_text)
                if match:
                    return match.group(0)
                
                # Si no hay un n√∫mero aislado, buscamos si el mensaje contiene solo un n√∫mero
                if message_text.strip() in ["1", "2", "3", "4", "5"]:
                    return message_text.strip()
                
                return message_text
            
            # Funci√≥n para procesar las opciones del men√∫
            def handle_menu_options(driver, message_text, user_id):
                chat_data = get_chat_data()
                if not chat_data:
                    print("‚ö†Ô∏è No se pudo obtener las opciones del men√∫.")
                    send_message_clipboard(driver, "‚ö†Ô∏è No se pudo obtener las opciones del men√∫.")
                    return False
                
                # Si estamos esperando una consulta para este usuario
                global waiting_for_query
                if user_id in waiting_for_query and waiting_for_query[user_id]:
                    print(f"üí¨ Recibida consulta de {user_id}: {message_text}")
                    
                    # Si el usuario quiere salir del modo consulta
                    if message_text.lower() in EXIT_COMMANDS:
                        waiting_for_query[user_id] = False
                        send_message_clipboard(driver, "‚úÖ Has salido del modo consulta. Volviendo al men√∫ principal...")
                        return send_welcome_menu(driver)
                    
                    # Procesar la consulta al cat√°logo
                    send_message_clipboard(driver, "üîç Consultando al cat√°logo con Gemini AI. Esto puede tomar un momento...")
                    response = process_query_with_gemini(message_text)
                    return send_message_clipboard(driver, response + "\n\n_Para salir de este modo escribe *salir* o *menu*_")
                
                # Ignorar silenciosamente 'menu' y 'salir'
                if message_text.lower() in ['menu', 'salir']:
                    print(f"üîá Ignorando silenciosamente la palabra clave: {message_text.lower()}")
                    return False
                
                # Extraer el n√∫mero de opci√≥n limpio
                clean_option = extract_option_number(message_text)
                print(f"Opci√≥n extra√≠da: '{clean_option}'")
                
                if clean_option == '4':
                    # Opci√≥n 4: Consulta con Gemini usando el cat√°logo PDF
                    # Marcar que estamos esperando una consulta de este usuario
                    waiting_for_query[user_id] = True
                    
                    # Despu√©s de 2 minutos, liberamos el estado
                    def reset_waiting_state(user_id):
                        time.sleep(120)  # 2 minutos
                        if user_id in waiting_for_query:
                            waiting_for_query[user_id] = False
                    
                    # Iniciar un hilo para resetear el estado despu√©s de un tiempo
                    import threading
                    threading.Thread(target=reset_waiting_state, args=(user_id,), daemon=True).start()
                    
                    send_message_clipboard(driver, "üîç *Modo Consulta al Cat√°logo*\n\nAhora puedes hacer preguntas sobre el cat√°logo.\nEscribe cualquier pregunta y Gemini AI te responder√°.\nPara volver al men√∫ principal, escribe *salir* o *menu*.")
                    return True
                elif clean_option in chat_data['respuestas']:
                    print(f"‚úÖ Respondiendo a la opci√≥n {clean_option}: {chat_data['respuestas'][clean_option]}")
                    return send_message_clipboard(driver, chat_data['respuestas'][clean_option])
                else:
                    print(f'‚ö†Ô∏è Opci√≥n inv√°lida: "{clean_option}". Mostrando men√∫ nuevamente...')
                    send_message_clipboard(driver, "‚ö†Ô∏è Opci√≥n no v√°lida. Por favor, selecciona una de las opciones del men√∫.")
                    return send_welcome_menu(driver)
            
            # Variable para evitar responder m√∫ltiples veces al mismo mensaje
            last_processed_message = ""
            
            # Funci√≥n para responder a un mensaje
            def respond_to_message(driver):
                nonlocal last_processed_message
                try:
                    # Obtener los √∫ltimos mensajes
                    last_messages = driver.find_elements(By.XPATH, "//div[@role='row']")
                    
                    if last_messages:
                        # Obtener el √∫ltimo mensaje
                        last_message = last_messages[-1]
                        message_text = last_message.text.strip()
                        
                        # Si este mensaje ya fue procesado, ignorarlo
                        if message_text == last_processed_message:
                            print("Este mensaje ya fue procesado. Ignorando.")
                            return False
                        
                        # Actualizar el √∫ltimo mensaje procesado
                        last_processed_message = message_text
                        
                        # Ignorar mensajes vac√≠os o que parecen ser solo interfaces de carga
                        if not message_text or message_text.lower() == "cargando...":
                            print("Mensaje ignorado: vac√≠o o mensaje de sistema")
                            return False
                        
                        # Verificar si el mensaje parece ser una respuesta anterior del bot
                        bot_identifiers = [
                            "‚ú® ¬°bienvenido", "opci√≥n no v√°lida", "informaci√≥n del cat√°logo",
                            "üì¶ *cat√°logo", "üè∑Ô∏è *ofertas", "üöö *informaci√≥n", "üîç *modo consulta"
                        ]
                        
                        for identifier in bot_identifiers:
                            if identifier in message_text.lower():
                                print("Este mensaje parece ser una respuesta anterior del bot. Omitiendo.")
                                return False
                        
                        print(f"Mensaje detectado: {message_text}")
                        
                        # Generar un ID de usuario √∫nico basado en la conversaci√≥n actual
                        # (En una implementaci√≥n ideal, esto ser√≠a un ID real del usuario)
                        user_id = f"user_{hash(driver.current_url) % 10000}" 
                        
                        # Verificar si es un comando de inicio
                        if any(cmd in message_text.lower() for cmd in START_COMMANDS):
                            print(f"üöÄ Comando de activaci√≥n detectado: {message_text}")
                            if user_id in waiting_for_query:
                                waiting_for_query[user_id] = False
                            return send_welcome_menu(driver)
                        
                        # Procesar las opciones del men√∫
                        return handle_menu_options(driver, message_text, user_id)
                    else:
                        print("No se encontraron mensajes en la conversaci√≥n")
                        return False
                except Exception as e:
                    print(f"Error al procesar mensajes: {e}")
                    return False
            
            # Bucle principal
            while True:
                try:
                    if target_chat_id:
                        # Modo de chat espec√≠fico: solo responder al chat abierto
                        responded = respond_to_message(driver)
                        if not responded:
                            print("No hay nuevos mensajes para responder en este chat")
                    else:
                        # Modo general: buscar conversaciones no le√≠das
                        unread_conversations = driver.find_elements(By.XPATH, 
                            "//div[contains(@aria-label, 'No le√≠do') or contains(@aria-label, 'Unread') or contains(@aria-label, 'New message')]")
                        
                        if unread_conversations:
                            print(f"Se encontraron {len(unread_conversations)} conversaciones no le√≠das")
                            
                            for conversation in unread_conversations:
                                try:
                                    # Hacer clic en la conversaci√≥n
                                    conversation.click()
                                    time.sleep(2)  # Esperar a que se cargue la conversaci√≥n
                                    
                                    # Responder al mensaje
                                    respond_to_message(driver)
                                    time.sleep(2)  # Esperar un poco antes de revisar la siguiente conversaci√≥n
                                except Exception as e:
                                    print(f"Error al procesar conversaci√≥n: {str(e)}")
                        else:
                            print("No hay conversaciones no le√≠das por el momento")
                    
                    # Esperar antes de volver a verificar
                    print("Esperando 15 segundos antes de volver a verificar...")
                    time.sleep(15)
                    
                    # Si estamos en modo de chat espec√≠fico, actualizar la p√°gina
                    if target_chat_id:
                        driver.refresh()
                        time.sleep(3)  # Esperar a que se cargue despu√©s de actualizar
                    else:
                        # En modo general, volver a la p√°gina principal de Messenger
                        driver.get("https://www.facebook.com/messages/t/")
                        time.sleep(3)  # Esperar a que se cargue
                    
                except KeyboardInterrupt:
                    print("Bot detenido manualmente")
                    break
                except Exception as e:
                    print(f"Error en el bucle principal: {str(e)}")
                    time.sleep(10)  # Esperar un poco antes de reintentar
        
        except Exception as e:
            print(f"Error durante la ejecuci√≥n: {str(e)}")
        
        finally:
            # Mantener el navegador abierto para que el usuario pueda ver lo que ocurri√≥
            print("Sesi√≥n finalizada. El navegador permanecer√° abierto.")
            print("Puedes cerrarlo manualmente cuando quieras.")
            try:
                input("Presiona Enter para cerrar el navegador...")
                driver.quit()
            except:
                pass
    
    except ImportError as e:
        print(f"Error al importar las dependencias: {str(e)}")
        print("Aseg√∫rate de que todas las dependencias est√©n instaladas correctamente.")
    except Exception as e:
        print(f"Error inesperado: {str(e)}")

if __name__ == "__main__":
    # Instalar las dependencias necesarias
    install_dependencies()
    
    # Preguntar al usuario si quiere responder a un chat espec√≠fico
    print("\nOpciones para ejecutar el bot:")
    print("1. Responder a todas las conversaciones no le√≠das")
    print("2. Responder a una conversaci√≥n espec√≠fica (necesitas el ID)")
    option = input("Selecciona una opci√≥n (1/2): ")
    
    if option == "2":
        chat_id = input("Introduce el ID del chat (ej. 29355186307462875): ")
        if chat_id.strip():
            print(f"Ejecutando bot para el chat espec√≠fico con ID: {chat_id}")
            facebook_messenger_bot(chat_id.strip())
        else:
            print("No se proporcion√≥ un ID v√°lido. Ejecutando en modo general...")
            facebook_messenger_bot()
    else:
        # Ejecutar el bot en modo general
        facebook_messenger_bot()